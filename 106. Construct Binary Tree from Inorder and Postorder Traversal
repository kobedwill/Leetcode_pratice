Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, 
construct and return the binary tree.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        // first records all positions in inorder vector
        unordered_map<int, int> mp;
        for(int i = 0; i<inorder.size(); i++)
            mp[inorder[i]] = i;
        // rootindex: represents the tree node
        int rootindex = postorder.size()-1;
        return helper(postorder, mp, rootindex, 0, inorder.size()-1);
    }
    TreeNode* helper(vector<int>& postorder, unordered_map<int,int>& mp, int& rootindex, int start, int end){
        if(start > end) return NULL;
        int currroot = postorder[rootindex--];
        int inordercurr = mp[currroot]; // root position in inorder vector --> divide tree to right and left
        TreeNode* root = new TreeNode(currroot);
        // need to do right hand side first(postorder: left->"right"->root, rootindex implies first the root of right side tree)
        root->right = helper(postorder, mp, rootindex, inordercurr+1, end);
        root->left = helper(postorder, mp, rootindex, start, inordercurr-1);
        
        return root;
    }

};
