Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

//////////////////////////////////////////////////////////////////////////////
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, vector<vector<int>> &ans, vector<int> record){
        if(!root) return;
        record.push_back(root->val);
        if(! root->left && ! root->right) ans.push_back(record);
        helper(root->left, ans, record);
        helper(root->right, ans, record);
        record.pop_back();
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<vector<int>> ans;
        vector<int> record;
        helper(root, ans, record);
        
        vector<string> res;
        for(int i=0; i<ans.size(); i++){
            string temp = "";
            for(int j = 0; j<ans[i].size(); j++){
                temp+=to_string(ans[i][j]);
                temp.push_back('-');
                temp.push_back('>');
            }
            temp.pop_back();
            temp.pop_back();
            res.push_back(temp);
        }
        return res;
    }
};
