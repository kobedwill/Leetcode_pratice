Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, 
find a water cell such that its distance to the nearest land cell is maximized, and return the distance. 
If no land or water exists in the grid, return -1.

The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        pair<int, int> direction[4] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        int max = -1, n = grid.size(), m = grid[0].size();
        vector<vector<bool>> visited(n, vector<bool>(m, 0));
        queue<pair<int, int>> q;
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                visited[i][j] = grid[i][j];
                if(grid[i][j] == 1)
                    q.push({i, j});
            }
        }
        while(!q.empty()){
            int k = q.size();
            while(k--){
                pair<int, int> curr = q.front();
                q.pop();
                for(pair<int,int> dir: direction){
                    int x = curr.first + dir.first;
                    int y = curr.second + dir.second;
                    if( x>=0 && y>=0 && x<n && y<m && visited[x][y] == 0){
                        q.push({x, y});
                        visited[x][y] = 1;
                    }
                }
            }
            max++;
        }
        return max == 0 ? -1 : max;
    }
};
