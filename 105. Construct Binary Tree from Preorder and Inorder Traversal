Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, 
construct and return the binary tree.

*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = preorder.size();
        unordered_map<int, int> mp;
        for(int i = 0;i <n; i++)
            mp[inorder[i]] = i;
        int rootindex = 0;
        return helper(preorder, mp, rootindex, 0, n-1);
    }
    TreeNode* helper(vector<int>& preorder, unordered_map<int, int>& mp, int& rootindex, int start, int end){
        if(start > end) return NULL;
        int currroot = preorder[rootindex++];
        int inordercurr = mp[currroot];
        TreeNode* root = new TreeNode(currroot);
        root->left = helper(preorder, mp, rootindex, start, inordercurr-1);
        root->right = helper(preorder, mp, rootindex, inordercurr+1, end);
        return root;
    }
};
