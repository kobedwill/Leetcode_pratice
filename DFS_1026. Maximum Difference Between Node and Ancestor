Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.

A node a is an ancestor of b if either: any child of a is equal to bÂ or any child of a is an ancestor of b.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxAncestorDiff(TreeNode* root) {
        if(root == NULL) return 0;
        return helper(root, root->val, root->val);
    }
    int helper(TreeNode* root, int currmax, int currmin){
        // termination condition--> root reach the leaf
        if(root == NULL){
            return currmax-currmin;
        }
        // record currmax and currmin
        currmax = max(currmax, root->val);    
        currmin = min(currmin, root->val);
        // iterative left side and right side
        int left = helper(root->left, currmax, currmin);
        int right = helper(root->right, currmax, currmin);
        // either left side difference or right side's is the maximum
        return max(left, right);
    }
};
