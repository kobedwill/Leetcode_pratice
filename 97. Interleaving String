Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where s and t are divided into n and m
substrings
respectively, such that:

    s = s1 + s2 + ... + sn
    t = t1 + t2 + ... + tm
    |n - m| <= 1
    The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...

Note: a + b is the concatenation of strings a and b.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int n = s1.size(), m = s2.size(), k = s3.size();
        if(n+m != k) return 0;
        if(n == 0 && m == 0 && k == 0) return 1;
        vector<vector<bool>> dp(n+1, vector<bool>(m+1));
        // dp[n][m] means: if the first n s1 string with first m s2 string can match the first (n+m) s3 string
        dp[0][0] = 1;
        for(int i = 1; i<=n; i++){
            dp[i][0] = dp[i-1][0] && (s1[i-1] == s3[i-1]);
        }
        for(int i = 1; i<=m; i++){
            dp[0][i] = dp[0][i-1] && (s2[i-1] == s3[i-1]);
        }
        for(int i = 1; i<=n; i++){
            for(int j = 1; j<=m; j++){
                dp[i][j] = ((dp[i-1][j] && s1[i-1] == s3[i-1+j]) || (dp[i][j-1] && s2[j-1] == s3[j-1+i]));
            }
        }
        return dp[n][m];
    }
};
