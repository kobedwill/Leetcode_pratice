Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans(2,-1);
        int left = 0, right = nums.size()-1;
        // first occurence
        while(left <= right){
            int middle = left + (right-left)/2;
            if(nums[middle] < target) left = middle+1;
            else if(nums[middle] > target) right = middle-1;
            else{
                if(middle == left || nums[middle] != nums[middle-1]){
                    ans[0] = middle;
                    break;
                }
                else{
                    ans[0] = middle-1;
                    right = middle-1;
                }
            }
        }
        left = 0, right = nums.size()-1;
        //right occurence
        while(left <= right){
            int middle = left + (right-left)/2;
            if(nums[middle] < target) left = middle+1;
            else if(nums[middle] > target) right = middle-1;
            else{
                if(middle == right || nums[middle] != nums[middle+1]){
                    ans[1] = middle;
                    break;
                }
                else{
                    left = middle+1;
                    ans[1] = middle+1;
                }
            }
        }
        return ans;
    }
};
