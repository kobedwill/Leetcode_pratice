Given the root of a binary tree, the depth of each node is the shortest distance to the root.

Return the smallest subtree such that it contains all the deepest nodes in the original tree.

A node is called the deepest if it has the largest depth possible among any node in the entire tree.

The subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* LCA(TreeNode* root, TreeNode* first, TreeNode* last){     // Lowest common ancestor
        if(!root || root == first || root == last) return root;
        auto left = LCA(root->left, first, last);
        auto right = LCA(root->right, first, last);
        if(left && right) return root;
        return left ? left : right;
    }
    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
        if(!root) return NULL;
        if(!root->left && !root->right) return root;
        TreeNode* first,* last;     // record the deepest level in tree
        queue<TreeNode*> q; 
        q.push(root);  
        while(!q.empty()){
            first = q.front();
            last = q.back();
            int n = q.size();
            while(n--){
                TreeNode* curr = q.front();
                q.pop();
                if(curr->left) q.push(curr->left);
                if(curr->right) q.push(curr->right);
            }
        }    
        TreeNode* ans = LCA(root, first, last);       // the LCA of the deepest level of tree --> the answer we want to find
        return ans;  
        /*vector<vector<pair<TreeNode*, int>>> record;
        int maxheight = 0;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int n = q.size();
            maxheight++;
            vector<pair<TreeNode*, int>> rec;
            while(n--){
                TreeNode* curr = q.front();
                q.pop();
                rec.push_back({curr, maxheight});
                if(curr->left) q.push(curr->left);
                if(curr->right) q.push(curr->right);
            }
        }*/
        
    }
};
