Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector<int>> ans;
        vector<int> record;
        //record.push_back(0); (for second way)
        helper(ans, 0,  graph, record);
        return ans;
    }
    void helper(vector<vector<int>>& ans, int curr, vector<vector<int>>& graph, vector<int> &record){
        // first way of Backtracking
        record.push_back(curr);
        if(curr == graph.size()-1) ans.push_back(record);
        else{
            for(int neigh : graph[curr])
            helper(ans, neigh, graph, record);
        }
        //
        // second way
        if(curr == graph.size()-1) ans.push_back(record);        
        else{
            for(int i = 0; i<graph[curr].size(); i++){
               int index = graph[curr][i];
               record.push_back(index);
               helper(ans, index, graph, record);
               record.pop_back();
            }
        }
        //
    }
};
