/*Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false*/

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        vector<int> S1(26,0);
        vector<int> S2(26,0);
        int n = s1.size(), m = s2.size();
        for(int i = 0; i<n; i++){
            S1[s1[i]-'a']++;
        }
        int i = 0, j = 0;
        
        while(j<m){
            S2[s2[j]-'a']++;
            
            if((j-i+1) == n ){
               if(S2 == S1)
                return true;
            } 
            
            if((j-i+1) < n) j++;
            else{
                S2[s2[i]-'a']--;
                i++;
                j++;
            }
        }
        return false;
    }
};
