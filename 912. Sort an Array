Given an array of integers nums, sort the array in ascending order and return it.

You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    void merge(vector<int>& nums, int start, int middle, int end){
        if(start >= end) return;
        int l = start, r = middle+1, k = 0, n = end - start + 1;
        vector<int> record(n,0);
        while(l <= middle && r <= end){
            record[k++] = nums[l] <= nums[r] ? nums[l++] : nums[r++]; 
        }
        while(l <= middle)
            record[k++] = nums[l++];
        while(r <= end)
            record[k++] = nums[r++];
        for(int i = 0; i<n; i++) 
            nums[i+start] = record[i]; // *** start to record sorted array from "int start"
    }
    void mergesort(vector<int>& nums, int start, int end){
        if(start < end){
            int middle = start + (end - start)/2;
            mergesort(nums, start, middle);
            mergesort(nums, middle+1, end);
            merge(nums, start, middle, end);
        }
    }
    vector<int> sortArray(vector<int>& nums) {
        // merge sort
        mergesort(nums, 0, nums.size()-1);
        return nums;
        // heap
        /*priority_queue<int> q;
        int n = nums.size();
        for(int i = 0; i<n; i++)
            q.push(nums[i]);
        for(int i = n-1; i>=0; i--){
            nums[i] = q.top();
            q.pop(); 
        }
        return nums;*/
    }
};
