A company is planning to interview 2n people. 
Given the array costs where costs[i] = [aCosti, bCosti], the cost of flying the ith person to city a is aCosti, and the cost of flying the ith person to city b is bCosti.

Return the minimum cost to fly every person to a city such that exactly n people arrive in each city.

/////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    int twoCitySchedCost(vector<vector<int>>& costs) {
        /*vector<int> diff;
        int n = costs.size(), totalcost = 0;
        for(int i = 0; i<n; i++){
            int diffs = costs[i][1] - costs[i][0];
            diff.push_back(diffs);
            totalcost+=costs[i][0];
        }
        sort(diff.begin(), diff.end());
        for(int i = 0; i*2<n; i++)
            totalcost+=diff[i];
        return totalcost;*/
        vector<pair<int, int>> diff;
        int n = costs.size(), totalcost = 0;
        for(int i = 0; i<n; i++){
            diff.push_back({costs[i][1]-costs[i][0], i});
        }
        sort(diff.begin(), diff.end());
        
        for(int i = 0; i<n; i++){
            int index = diff[i].second;
            totalcost+=(i < n/2 ? costs[index][1] : costs[index][0]);
        }
        return totalcost;
    }
};
