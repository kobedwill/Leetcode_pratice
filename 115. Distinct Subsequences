Given two strings s and t, return the number of distinct
subsequences
of s which equals t.

The test cases are generated so that the answer fits on a 32-bit signed integer.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int numDistinct(string s, string t) {
        int mod = 1e9+7;
        int n = s.size(), m = t.size();
        vector<vector<long long>> dp(n+1, vector<long long>(m+1, 0));
        for(int i = 0; i<=n; i++) dp[i][0] = 1;
        for(int i = 1; i<=n; i++){
            for(int j = 1; j<=m; j++){
                if(s[i-1] == t[j-1]) 
                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1])%mod;
                else
                    dp[i][j] = (dp[i-1][j])%mod;
            }
        }
        return dp[n][m];
    }
};
